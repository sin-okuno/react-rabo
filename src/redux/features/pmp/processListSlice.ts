import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../store";
import { ProcessType } from "../../../types/pmp";
import axios from "axios";

export interface processListState {
  value: Array<ProcessType>;
  knowledgeAreaId: string;
  status: "idle" | "loading" | "failed";
}

const initialState: processListState = {
  value: [],
  knowledgeAreaId:'',
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const processListAsync = createAsyncThunk(
  "processList", 
  async (id:string) => 
  {
    const response = await axios.get<string>(`/csv/pmp/process/process_${id}.csv`);
    const dataArray:string[][] = [];
    const dataString = response.data.split("\n");
    const processList:Array<ProcessType> = []
    for (let row = 0; row < dataString.length; row++) {
      dataArray[row] = dataString[row].split(",");
      console.log(dataArray[row].length);

      for (let col = 0; col < dataArray[row].length; col = col+3) {
        const process:ProcessType = {
          id:dataArray[row][col+0],
          processName:dataArray[row][col+1],
          processGroup:dataArray[row][col+2]
        }
        processList.push(process)
      }
    }

    // The value we return becomes the `fulfilled` action payload
    return processList;
  }
);

export const processListSlice = createSlice({
  name: "processList",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setKnowledgeAreaId: (state, action:PayloadAction<string>) => {
      state.knowledgeAreaId = action.payload;
    },
  },
  
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(processListAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(processListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      });
  },
});

export const {setKnowledgeAreaId} = processListSlice.actions;

export const selectProcessList = (state: RootState): processListState =>state.processList;

export default processListSlice.reducer;
