import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { TodoType,SortTodoType, SortTodo } from "../../types/todo";
import axios from "axios";
import Switch from 'react-bootstrap/esm/Switch';

export interface todoState {
  value: Array<TodoType>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: todoState = {
  value: null,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getTodoAsync = createAsyncThunk(
  'todo/fetchCount',
  async () => {
    const response = await axios.get<Array<TodoType>>("https://jsonplaceholder.typicode.com/todos");
    
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const todoSlice = createSlice({
  name: 'todo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    sort: (state, action: PayloadAction<SortTodoType>) => {
      console.log("sort")
      switch (action.payload) {
        case SortTodo.id:
          state.value = state.value.sort((a, b) => a.id - b.id);          
          break;
        case SortTodo.userId:
          state.value = state.value.sort((a, b) => a.userId - b.userId);
          break;
        case SortTodo.title:
          state.value =  state.value.sort((a, b) => {
            const titleA = a.title.toUpperCase();
            const titleB = b.title.toUpperCase();
            if (titleA < titleB) {
              return -1;
            }
            if (titleA > titleB) {
              return 1;
            }
          })
          break;
        default:
          break;
      }        
    },
  },    
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTodoAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getTodoAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  },
});



// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodo = (state: RootState):Array<TodoType> => state.todo.value;

export default todoSlice.reducer;
